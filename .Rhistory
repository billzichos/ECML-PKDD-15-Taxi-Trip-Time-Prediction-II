fit <- lm(child ~ parent, galton)
fit$residuals^2/(926)
sqrt(sum(fit$residuals^2) / (n-2))
summmary(fit)$signma
summmary(fit)$sigma
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(galton$child)
help(deviance)
sRes <- deviance(lm(galton$child~galton$parent))
sRes <- deviance(fit)
1 - (sRes/sTot)
1 - sRes/sTot
summary(fit)$r.quared
summary(fit)$r.squared
cor(galton$parent, galton$child)
cor(galton$parent, galton$child)^2
ones <- rep(1, nrow(galton))
lm(child~ones + parent - 1, galton)
lm(child~parent,galton)
lm(child ~ 1, galton)
head(tree)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility ~ ., swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms
makelms()
ec <- sum(swiss$Examination + swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility~.+ec, swiss)
makelms() - summary(efit)$coef
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count~spray-1)
nfit <- lm(count~spray-1, InsectSprays)
nfit$coefficients
summmary(nfit)$coef
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count~spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
length(hunger)
948
sapply(hunger, class)
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric~Year, hunger[hunger$Sex=="Female"])
lmF <- lm(Numeric~Year, hunger[hunger$Sex=="Female",])
lmF <- lm(Numeric[Sex=="Female"]~Year[Sex=="Female"], hunger)
lmM <- lm(Numeric[Sex=="Male"]~Year[Sex=="Male"], hunger)
lmBoth <- lm(Numeric~Year+Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric~Year+Sex+Sex*Year, hunger)
summary(lmInter)
help(mtcars)
mtcars
rownames(mtcars)
sort(rownames(mtcars), decreasing = FALSE)
df[df$am=="Automatic",]
df$am
df$am
df <- mtcars
df[df$am=="Automatic",]
df.automatic <- df[df$am==0,]
df.automatic
tapply(mtcars, am, mean(x$mpg))
tapply(mtcars, am, mean(mtcars$mpg))
mean(mtcars$mpg)
table(mean(mtcars$mpg)
)
table(mean(mtcars$mpg) ~ am)
help(table)
help(tapply)
tapply(mtcars$mpg, mtcars$am, mean())
tapply(mtcars$mpg, mtcars$am, mean
)
fit <- lm(mpg ~ am, data = df)
fit$xlevels
fit$model
df <- mtcars
labels(df)
names(df)
round(4.545645,1)
help(mtcars)
summary(lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs))
summary(lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb, data = mtcars))
plot(mtcars)
df <- mtcars
names(df) <- c("mpg", "cylinders", "displacement", "horsepower", "rear.axle.ration", "weight", "qtr.mile.interval", "v/s", "transmission", "num.gears", "num.carbs")
library("swirl")
swirl()
0
exit
0
plot(child ~ parent, galton)
exit()
0
plot(mtcars[,c("mpg", "wt", "am")])
str(mtcars)
plot(mtcars[,c("mpg", "wt", "am", "gear")])
lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb, data = mtcars)$coefficients
lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb, data = mtcars)
help(lm)
fit <- lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb, data = mtcars)
summary(fit)
fit$qr
str(fit)
fit$coefficients
fit$coefficients$Pr
fit$df.residual
fit$rank''
fit$rank
fit$response
coef(fit)
prob(fit)
summary(fit)
help(cov)
cov(mtcars$wt, mtcars$transmission)
cov(x = mtcars$wt, y = mtcars$transmission)
cov(wt, am, data = mtcars)
cov(x = mtcars$wt, y = mtcars$am)
cov(x = mtcars$gear, y = mtcars$am)
trans.stats <- tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))})
df.small <- df[,c("mpg","weight", "transmission", "num.gears")]
df <- mtcars
names(df) <- c(
"mpg", "cylinders", "displacement", "horsepower", "rear.axle.ration", "weight",
"qtr.mile.interval", "v/s", "transmission", "num.gears", "num.carbs")
#format the transmission variable as a factor
df$transmission <- as.factor(df$transmission)
# convert the 0'1 and 1's to actual names
levels(df$transmission) <- c("Automatic", "Manual")
#format the number of gears as a factor
df$num.gears <- as.factor(df$num.gears)
df.small <- df[,c("mpg","weight", "transmission", "num.gears")]
tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))})
trans.stats <- tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))})
trans.stats
g <- ggplot(df.small, aes(mpg))
g <- g + facet_grid(transmission ~ .)
g <- g + geom_histogram(bins = 6)
g
library(ggplot2)
g <- ggplot(df.small, aes(mpg))
g <- g + facet_grid(transmission ~ .)
g <- g + geom_histogram(bins = 6)
g
fit <- lm(mpg ~ transmission, data = df.small)
summary(fit)
plot(fit$residuals)
fit2 <- lm(mpg ~ transmission + weight + num.gears, data = df.small)
summary(fit2)
plot(fit2$residuals)
sort(rownames(mtcars), decreasing = FALSE)
df <- mtcars
#apply recognizable names
names(df) <- c(
"mpg", "cylinders", "displacement", "horsepower", "rear.axle.ration", "weight",
"qtr.mile.interval", "v/s", "transmission", "num.gears", "num.carbs")
#format the transmission variable as a factor
df$transmission <- as.factor(df$transmission)
# convert the 0'1 and 1's to actual names
levels(df$transmission) <- c("Automatic", "Manual")
#format the number of gears as a factor
df$num.gears <- as.factor(df$num.gears)
df.small <- df[,c("mpg","weight", "transmission", "num.gears")]
trans.stats <- tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))})
trans.stats
attr(trans.stats)
attributes(trans.stats)
formula(trans.stats)
str(trans.stats)
trans.stats.f <- formula(tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))}))
help(formula)
formula(trans.stats)
trans.stats.f <- as.formula(tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))}))
trans.stats.f <- as.formula("tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))}))")
trans.stats.f <- as.formula("tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))})")
trans.stats.f <- as.formula("tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))})")
trans.stats.f <- as.formula("tapply(df.small$mpg, df.small$transmission, function(x) {c(Mean=mean(x),Median=median(x),StdDev=sd(x),Low=min(x),High=max(x))})")
trans.stats.f <- as.formula("tapply(df.small$mpg, df.small$transmission, function(x) {c(Mean=mean(x),Median=median(x),StdDev=sd(x),Low=min(x),High=max(x))})")
trans.stats.f <- "tapply(df.small$mpg, df.small$transmission, function(x) {c(Mean=mean(x),Median=median(x),StdDev=sd(x),Low=min(x),High=max(x))})"
trans.stats <- as.formula(trans.stats.f)
x <- "tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))})"
as.formula(x)
fit <- lm(mpg ~ transmission, data = df.small)
fit2 <- lm(mpg ~ transmission + weight + num.gears, data = df.small)
resid(fit)
sum(resid(fit))
sum(resid(fit)^2)
sum(resid(fit2)^2)
resid(fit)
sum(resid(fit)^2)
sum(resid(lm(mpg ~ transmission, data = df))^2)
sum(resid(lm(mpg ~ transmission, data = df))^2)
help(mtcars)
sum(resid(lm(mpg ~ transmission, data = df))^2)
sum(resid(lm(mpg ~ transmission + cyl, data = df))^2)
sum(resid(lm(mpg ~ transmission, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ratio, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + v/s, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + "v/s", data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + transmission, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears + num.carbs, data = df))^2)
fit$order
fit$effects
summary(fit)
summary(fit2)
lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears + num.carbs, data = df)
summary(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears + num.carbs, data = df))
order(summary(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears + num.carbs, data = df)))
rank(summary(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears + num.carbs, data = df)))
lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears + num.carbs, data = df)$rank
g <- ggplot(df, aes(transmission, mpg))
g <- g + geom_boxplot()
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + geom_boxplot(colour=num.gears)
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + geom_boxplot(aes(colour=num.gears))
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + geom_boxplot(aes(colour=num.gears))
g <- g + geom_boxplot()
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + geom_boxplot()
g <- g + geom_boxplot(aes(colour=num.gears))
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + geom_boxplot(aes(colour=num.gears))
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + ggtitle("MPG by Transmission Type")
g <- g + geom_abline(yintercept = mean(df$mpg))
g <- g + geom_boxplot()
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + ggtitle("MPG by Transmission Type")
g <- g + geom_hline(yintercept = mean(df$mpg))
g <- g + geom_boxplot()
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + ggtitle("MPG by Transmission Type")
g <- g + geom_hline(yintercept = mean(df$mpg), colour = "red")
g <- g + geom_boxplot()
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + ggtitle("MPG by Transmission Type")
g <- g + geom_hline(yintercept = mean(df$mpg), colour = "red")
g <- g + geom_hline(yintercept = median(df$mpg), colour = "green")
g <- g + geom_boxplot()
g
help(plot)
n <- 100; x <- c(10, rnorm(n)); y <- c(10, rnorm(n))
plot(x, y, frame = FALSE, cex = 2, pch =21, bg = "lightblue", col = "black")
abline(lm(y~x))
fit <- lm(y~x)
round(dfbetas(fit)[1:10, 2], 3)
par(mfrow = c(1,3))
plot(0:10, dpois(0:10, lambda = 2), type = "h", frame = FALSE)
plot(0:20, dpois(0:20, lambda = 10), type = "h", frame = FALSE)
plot(0:200, dpois(0:200, lambda = 100), type = "h", frame = FALSE)
swirl()
library("swirl")
SWIRL()
swirl()
rgpl()
rgp1 <- function(){
print("Processing. Please wait.")
# number of samples per simulation
n <- 100
# number of simulations
nosim <- 1000
# set seed for reproducibility
set.seed(4321)
# Point A
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
# Point B
betas <- sapply(1 : nosim, function(i)makelms(x1, x2, x3))
round(apply(betas, 1, var), 5)
}
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data = swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, data = swiss)
vif(mdl2)
xlc <- simbias()
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture)
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, data = swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3)) / 2
n/d
pf(n/d, 2, 43, lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial",data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
bye()
library("swirl")
swirl()
return()
swirl()
var(rpois(1000, 50))
head(hits)
class(hits[,"date"])
as.integer(head(hits[,"date"]))
mdl <- glm(visits ~ date, family = "poisson", data = hits)
summary(mdl)
exp(confint(mdl, "date"))
which.max(hits[,"visits"])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(offset=log(visits+1) ~ date, poisson, hits)
mdl2 <- glm(offset=log(visits+1) ~ date, "poisson", hits)
mdl2 <- glm(I(offset=log(visits+1)) ~ date, "poisson", hits)
mdl <- 0
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
?shuttle
glm(use ~ wind,family = "binomial", data = shuttle)
shuttle
shuttle()
library(MASS)
shuttle()
library("MASS")
glm(use ~ wind,family = "binomial", data = shuttle)
prob(glm(use ~ wind,family = "binomial", data = shuttle))
fit <- glm(use ~ wind,family = "binomial", data = shuttle)
summary(fit)
?glm
anova(fit)
glm(as.factor(spray), family = "poisson", data = InsectSprays)
InsectSprays
help(InsectSprays)
glm(spray, family = "poisson", data = InsectSprays)
glm(count ~ spray, family = "poisson", data = InsectSprays)
2.67415/0.05588
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x, y)
plot(shuttle)
plot(use, wind, data = shuttle)
plot(shuttle$use, shuttle$wind)
sum(shuttle$auto)
str(shuttle)
shut <- shuttle
shut$use=="auto"
which(shut$use=="auto")
length(which(shut$use=="auto"))
shut[which(shut$use=="auto"),"wind"]
summary(shut[which(shut$use=="auto"),"wind"])
wd <- "~/GitHub/Digit-Recognizer"
setwd(wd)
# The following files are provided
#   - train.csv
#   - test.csv
source("~/GitHub/Get-Raw-Data/download.R")
downloadKaggle("digit-recognizer","train.csv")
downloadKaggle("digit-recognizer","test.csv")
wd <- "~/GitHub/Digit-Recognizer"
setwd(wd)
# The following files are provided
#   - train.csv
#   - test.csv
source("~/GitHub/Get-Raw-Data/download.R")
downloadKaggle("digit-recognizer","train.csv")
downloadKaggle("digit-recognizer","test.csv")
wd <- "~/GitHub/ECML-PKDD-15-Taxi-Trajectory-Prediction-I"
setwd(wd)
# The following files are provided
#   - evaluation_script.r
#   - metaData_taxistandsID_name_GPSlocation.csv.zip
#   - sampleSubmission.csv.zip
#   - test.csv.zip
#   - train.csv.zip
source("~/GitHub/Get-Raw-Data/download.R")
downloadKaggle("pkdd-15-predict-taxi-service-trajectory-i", "evaluation_script.r")
#downloadSingleKaggleZip("pkdd-15-predict-taxi-service-trajectory-i","metaData_taxistandsID_name_GPSlocation.csv.zip", "metaData_taxistandsID_name_GPSlocation.csv")
downloadSingleKaggleZip("pkdd-15-predict-taxi-service-trajectory-i","sampleSubmission.csv.zip", "sampleSubmission.csv")
downloadSingleKaggleZip("pkdd-15-predict-taxi-service-trajectory-i","test.csv.zip", "test.csv")
downloadSingleKaggleZip("pkdd-15-predict-taxi-service-trajectory-i","train.csv.zip", "train.csv")
wd <- "~/GitHub/ECML-PKDD-15-Taxi-Trajectory-Prediction-I"
setwd(wd)
# The following files are provided
#   - evaluation_script.r
#   - metaData_taxistandsID_name_GPSlocation.csv.zip
#   - sampleSubmission.csv.zip
#   - test.csv.zip
#   - train.csv.zip
source("~/GitHub/Get-Raw-Data/download.R")
downloadKaggle("pkdd-15-predict-taxi-service-trajectory-i", "evaluation_script.r")
#downloadSingleKaggleZip("pkdd-15-predict-taxi-service-trajectory-i","metaData_taxistandsID_name_GPSlocation.csv.zip", "metaData_taxistandsID_name_GPSlocation.csv")
downloadSingleKaggleZip("pkdd-15-predict-taxi-service-trajectory-i","sampleSubmission.csv.zip", "sampleSubmission.csv")
downloadSingleKaggleZip("pkdd-15-predict-taxi-service-trajectory-i","test.csv.zip", "test.csv")
downloadSingleKaggleZip("pkdd-15-predict-taxi-service-trajectory-i","train.csv.zip", "train.csv")
wd <- "~/GitHub/ECML-PKDD-15-Taxi-Trip-Time-Prediction-II"
setwd(wd)
# The following files are provided
#   - metaData_taxistandsID_name_GPSlocation.csv.zip
#   - test.csv.zip
#   - train.csv.zip
#   - sampleSubmission.csv.zip
#   - evaluation_script.r
source("~/GitHub/Get-Raw-Data/download.R")
#downloadSingleKaggleZip("pkdd-15-taxi-trip-time-prediction-ii","metaData_taxistandsID_name_GPSlocation.csv.zip", "metaData_taxistandsID_name_GPSlocation.csv")
downloadSingleKaggleZip("pkdd-15-taxi-trip-time-prediction-ii","test.csv.zip", "test.csv")
downloadSingleKaggleZip("pkdd-15-taxi-trip-time-prediction-ii","train.csv.zip", "train.csv")
downloadSingleKaggleZip("pkdd-15-taxi-trip-time-prediction-ii","sampleSubmission.csv.zip", "sampleSubmission.csv")
downloadKaggle("pkdd-15-taxi-trip-time-prediction-ii", "evaluation_script.r")
